/**
 * Tree-generating parser for Quant.
 *
 * Run with CUP to generate sym.java
 * (Needed to run scanner generated by
 * JFlex + lexer.jflex.)
 * --Aubrey
 */

import java_cup.runtime.*;

parser code {:
:}

/*
 * Symbol definitions
 */

terminal Symbol PRINT;

terminal Symbol STRING_LITERAL;

terminal Symbol PERIOD;

terminal Symbol INVALID;

/*
 * non-terminals
 */
non terminal Node line_block;
non terminal Node line;
non terminal Node statement;
non terminal Node optv_statement;
non terminal Node line_terminator;
non terminal Node operative_kwd;
non terminal Node value;

line_block	::= line_block:lb line:ln
		    {: lb.addChild(ln); RESULT = lb; :}
		    |
		    line:ln
		    {: RESULT = new LineBlock(ln); :}
		    ;

line		::= statement:stmt line_terminator:lt
		    {: RESULT = new Line(stmt, lt); :}
		    ;

statement	::= optv_statement:ostmt
		    {: RESULT = new Statement(ostmt); :}
		    ;

optv_statement	::= operative_kwd:kwd value:v
		    {: RESULT = new OperativeStatement(kwd, v); :}
		    ;

operative_kwd	::= PRINT
		    {: RESULT = new OperativeKeyword(Node.SEM_PRINT_KWD); :}
		    ;

value		::= STRING_LITERAL:s
		    {: RESULT = new StringConstant(s.value.toString()); :}
		    ;

line_terminator ::= PERIOD
		    {: RESULT = new Terminator(Node.IMP_TERM); :}
		    ;
