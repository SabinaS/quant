/**
 * Tree-generating parser for Quant.
 *
 * Run with CUP to generate sym.java
 * (Needed to run scanner generated by
 * JFlex + lexer.jflex.)
 * --Aubrey
 */

import java_cup.runtime.*;

parser code {:
:}

/*
 * Symbol definitions
 */

terminal PRINT;

terminal String IDENTIFIER;
terminal String STRING_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal Double RATIONAL_LITERAL;

terminal PERIOD;

terminal INVALID;

/*
 * non-terminals
 */
non terminal Node line_block;
non terminal Node line;
non terminal Node statement;
non terminal Node optv_statement;
non terminal Node line_terminator;
non terminal Node operative_kwd;
non terminal Node value;
non terminal Node quantity;
non terminal Node number;
non terminal Node unit;

line_block	::= line_block:lb line:ln
		    {: lb.addChild(ln); RESULT = lb; :}
		    |
		    line:ln
		    {: RESULT = new LineBlock(ln); :}
		    ;

line		::= statement:stmt line_terminator:lt
		    {: RESULT = new Line(stmt, lt); :}
		    ;

statement	::= optv_statement:ostmt
		    {: RESULT = new Statement(ostmt); :}
		    ;

optv_statement	::= operative_kwd:kwd value:v
		    {: RESULT = new OperativeStatement(kwd, v); :}
		    ;

operative_kwd	::= PRINT
		    {: RESULT = new OperativeKeyword(Node.SEM_PRINT_KWD); :}
		    ;

value		::= STRING_LITERAL:s
		    {: RESULT = new StringConstant(s); :}
		    |
		    quantity:q
		    {: RESULT = new Value(q); :}
		    ;

quantity	::= number:num unit:u
		    {: RESULT = new Quantity(num, u); :}
                    |
		    number:num
		    {: RESULT = new Quantity(num, null); :}
		    ;

number		::= INTEGER_LITERAL:num
		    {: RESULT = new Number(num); :}
		    |
		    RATIONAL_LITERAL:num
		    {: RESULT = new Number(num); :}
		    ;

unit		::= IDENTIFIER:ident
		    {: // More symbol table management here -- record ident type
		       RESULT = new Unit(ident);
                    :}
		    ;

line_terminator ::= PERIOD
		    {: RESULT = new Terminator(Node.IMP_TERM); :}
		    ;
